{"version":3,"sources":["gentlemancat.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","wetFoodOptions","kcalPerKgWetFood","gWetFood","kcalPerFeeding","kcalPerKgDryFood","onWetFoodChange","bind","assertThisInitialized","onWetFoodAmountChange","calculateDryFood","_this2","fetch","then","response","json","responseJson","feed","entry","map","row","label","title","$t","value","parseFloat","content","split","setState","catch","error","console","wetFood","event","target","isNaN","kgWetFood","kcalWetFood","kgDryFood","Math","round","react_default","a","createElement","className","App_InfoSection","App_WetFoodSelector","options","App_WetFoodAmount","App_DryFoodAmount","amount","Component","InfoSection","src","GentlemanCat","alt","WetFoodSelector","react_select_esm","props","onChange","WetFoodAmount","type","DryFoodAmount","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b1d09cd7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gentlemancat.70e613e0.png\";","import React, { Component } from 'react';\nimport Select from 'react-select';\nimport './App.css';\nimport GentlemanCat from './gentlemancat.png';\n\n\nconst GOOGLE_SHEET_URL = 'https://spreadsheets.google.com/feeds/list/14e4-F9rcLuyZ71so6S4E-QrcXHTjO8907BVZiR3mH2k/od6/public/basic?alt=json';\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            loading: true,\n            wetFoodOptions: [],\n            kcalPerKgWetFood: 0,\n            gWetFood: 0,\n            kcalPerFeeding: 123,\n            kcalPerKgDryFood: 3790,\n        }\n        this.onWetFoodChange = this.onWetFoodChange.bind(this);\n        this.onWetFoodAmountChange = this.onWetFoodAmountChange.bind(this);\n        this.calculateDryFood = this.calculateDryFood.bind(this);\n    }\n\n    componentWillMount() {\n        fetch(GOOGLE_SHEET_URL)\n            .then((response) => response.json())\n            .then((responseJson) => {\n                const wetFoodOptions = responseJson.feed.entry.map((row) => {\n                    return {\n                        label: row.title.$t,\n                        value: parseFloat(\n                            row.content.$t.split(' ')[1]\n                        )\n                    }\n                });\n                this.setState({\n                    loading: false,\n                    wetFoodOptions: wetFoodOptions,\n                });\n            })\n            .catch((error) => {\n                console.error(error);\n            });\n    }\n\n    onWetFoodChange(wetFood) {\n        this.setState({ kcalPerKgWetFood: wetFood.value });\n    }\n\n    onWetFoodAmountChange(event) {\n        this.setState({ gWetFood: event.target.value });\n    }\n\n    calculateDryFood() {\n        if (isNaN(this.state.gWetFood) === true) { return 0 }\n        const kgWetFood = this.state.gWetFood / 1000;\n        const kcalWetFood = this.state.kcalPerKgWetFood * kgWetFood;\n        // kgDryFood = (kcalPerFeeding - kcalWetFood) / kcalPerKgDryFood;\n        const kgDryFood = (this.state.kcalPerFeeding - kcalWetFood) / this.state.kcalPerKgDryFood;\n\n        return Math.round(kgDryFood*1000);\n    }\n\n    render() {\n        return (\n            <div className='App'>\n                <InfoSection />\n                <WetFoodSelector\n                    options={this.state.wetFoodOptions}\n                    onWetFoodChange={this.onWetFoodChange}\n                />\n                <div className='Amounts'>\n                    <WetFoodAmount\n                        gWetFood={this.state.gWetFood}\n                        onWetFoodAmountChange={this.onWetFoodAmountChange}\n                    />\n                    <DryFoodAmount\n                        amount={this.calculateDryFood()}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nclass InfoSection extends Component {\n    render() {\n        return (\n            <div className='InfoSection'>\n                <div className='title'><h1>Plutocat</h1></div>\n                <div className='title-image'>\n                    <img\n                        src={GentlemanCat}\n                        alt='A very fancy cat'\n                    />\n                </div>\n                <div className='tagline'>(he's kind of a big deal)</div>\n            </div>\n        )\n    }\n}\n\nclass WetFoodSelector extends Component {\n    render() {\n        return (\n            <div className='WetFoodSelector'>\n                <Select\n                    options={this.props.options}\n                    onChange={this.props.onWetFoodChange}\n                />\n            </div>\n        )\n    }\n}\n\nclass WetFoodAmount extends Component {\n    render() {\n        return (\n            <div className='WetFoodAmount'>\n                <input\n                    type='text'\n                    value={this.props.gWetFood}\n                    onChange={this.props.onWetFoodAmountChange}\n                />\n                <div className='unit-label'>\n                    g\n                </div>\n            </div>\n        )\n    }\n}\n\n\nclass DryFoodAmount extends Component {\n    render() {\n        return (\n            <div className='DryFoodAmount'>\n                <div className='display'>{this.props.amount} g</div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}